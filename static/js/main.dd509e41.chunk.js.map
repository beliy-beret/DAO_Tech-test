{"version":3,"sources":["components/InputTask.jsx","components/Task.jsx","components/TaskList.jsx","components/Counter.jsx","App.js","reportWebVitals.js","index.js"],"names":["InputTask","inputHandler","taskText","createTask","type","placeholder","value","onChange","className","onClick","Task","text","deleteTask","Id","toggleDone","done","TaskList","tasksList","complited","uncomplited","filter","tasks","map","task","id","length","Counter","label","readOnly","App","useState","setTasksList","setTaskText","doneCounter","setDoneCounter","taskCounter","setTaskCounter","setComplited","setUncomplited","setFilter","useEffect","item","toggleFilter","e","target","el","alert","Math","floor","random","name","defaultChecked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAUeA,EARG,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WACxC,OACI,gCACI,uBAAOC,KAAK,OAAOC,YAAY,gEAAcC,MAAOJ,EAAUK,SAAUN,IACxE,wBAAQO,UAAU,SAASC,QAASN,EAApC,iGCMGO,EAVF,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,KAC7C,OACI,sBAAKP,UAAU,sBAAf,UACI,mBAAGA,UAAYO,EAAO,OAAS,IAAKN,QAAS,kBAAMK,EAAWD,IAA9D,SACKF,IAEL,wBAAQH,UAAU,SAASC,QAAS,kBAAMG,EAAWC,IAArD,iGCgBGG,EArBE,SAAC,GAAyE,IAAxEC,EAAuE,EAAvEA,UAAWC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,OAAQR,EAA4B,EAA5BA,WAAYE,EAAgB,EAAhBA,WAClEO,EAAQ,GAcZ,MAbe,QAAXD,EACAC,EAAQJ,EAAUK,KACd,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAoBV,GAAIU,EAAKC,GAAIb,KAAMY,EAAKZ,KAAMI,KAAMQ,EAAKR,KACrEH,WAAYA,EAAYE,WAAYA,GADjBS,EAAKC,OAGV,cAAXJ,EACPC,EAAQH,EAAUI,KAAK,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAoBV,GAAIU,EAAKC,GAAIb,KAAMY,EAAKZ,KAAMI,KAAMQ,EAAKR,KACxFH,WAAYA,EAAYE,WAAYA,GADES,EAAKC,OAE7B,gBAAXJ,IACPC,EAAQF,EAAYG,KAAK,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAoBV,GAAIU,EAAKC,GAAIb,KAAMY,EAAKZ,KAAMI,KAAMQ,EAAKR,KAC1FH,WAAYA,EAAYE,WAAYA,GADIS,EAAKC,QAKjD,qBAAKhB,UAAU,aAAf,SACKS,EAAUQ,OAAS,EAAI,8HAA4BJ,KCbjDK,EALC,SAAC,GAAoB,IAAnBpB,EAAkB,EAAlBA,MAAOqB,EAAW,EAAXA,MACrB,OACI,kCAAQA,EAAM,uBAAOrB,MAAOA,EAAOF,KAAK,SAASwB,UAAQ,QCyElDC,MAvEf,WAEE,MAAkCC,mBAAS,IAA3C,mBAAOb,EAAP,KAAkBc,EAAlB,KACA,EAAgCD,mBAAS,IAAzC,mBAAO5B,EAAP,KAAiB8B,EAAjB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAsCJ,mBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOZ,EAAP,KAAkBmB,EAAlB,KACA,EAAsCP,mBAAS,MAA/C,mBAAOX,EAAP,KAAoBmB,EAApB,KACA,EAA4BR,mBAAS,OAArC,mBAAOV,EAAP,KAAemB,EAAf,KAGAC,qBAAU,kBAAMN,EAAejB,EAAUG,QAAQ,SAAAqB,GAAI,OAAkB,IAAdA,EAAK1B,QAAeU,UAAS,CAACR,IACvFuB,qBAAU,kBAAMJ,EAAenB,EAAUG,QAAQ,SAAAqB,GAAI,OAAkB,IAAdA,EAAK1B,QAAgBU,UAAS,CAACR,IACxFuB,qBAAU,kBAAMH,EAAapB,EAAUG,QAAO,SAAAqB,GAAI,OAAkB,IAAdA,EAAK1B,WAAiB,CAACE,IAC7EuB,qBAAU,kBAAMF,EAAerB,EAAUG,QAAO,SAAAqB,GAAI,OAAkB,IAAdA,EAAK1B,WAAkB,CAACE,IAChF,IA2BMyB,EAAe,SAACC,GAAD,OAAOJ,EAAUI,EAAEC,OAAOtC,QAG/C,OACE,sBAAKE,UAAU,MAAf,UACE,0BAASA,UAAU,gBAAnB,UACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,CAASF,MAAO2B,EAAaN,MAAO,wGAEtC,qBAAKnB,UAAU,cAAf,SACE,cAAC,EAAD,CAASF,MAAO6B,EAAaR,MAAO,0IAGxC,yBAASnB,UAAU,iBAAnB,SACE,cAAC,EAAD,CAAUS,UAAWA,EAAWC,UAAWA,EAAWC,YAAaA,EACnEC,OAAQA,EAAQR,WA5BH,SAACC,GAClBkB,EAAad,EAAUG,QAAQ,SAAAyB,GAAE,OAAIA,EAAGrB,KAAOX,OA2BHC,WAzB3B,SAACD,GAClBkB,EAAad,EAAUK,KAAK,SAAAmB,GAC1B,OAAIA,EAAKjB,KAAOX,EACP,2BACF4B,GADL,IAEE1B,MAAO0B,EAAK1B,OAEP0B,WAoBT,yBAASjC,UAAU,aAAnB,SACE,cAAC,EAAD,CAAWP,aA7CI,SAAC0C,GAAD,OAAOX,EAAYW,EAAEC,OAAOtC,QA6CJJ,SAAUA,EAAUC,WA5C9C,WACbD,EAASuB,OAAS,GACpBqB,MAAM,mKACG5C,EAASuB,OAAS,EAC3BqB,MAAO,+LAEPf,EAAa,GAAD,mBACPd,GADO,CAEV,CAACO,GAAIuB,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkBtC,KAAMT,EAAUa,MAAM,MAE/DiB,EAAY,UAoCZ,0BAASxB,UAAU,eAAnB,UACE,sEACA,4IAAyB,uBAAOJ,KAAK,QAAQ8C,KAAK,QAAQ5C,MAAM,YAAYC,SAAUmC,OACtF,yJAA4B,uBAAOtC,KAAK,QAAQ8C,KAAK,QAAQ5C,MAAM,cAAcC,SAAUmC,OAC3F,kGAAkB,uBAAOtC,KAAK,QAAQ8C,KAAK,QAAQ5C,MAAM,MAAMC,SAAUmC,EAAcS,gBAAc,cC5D9FC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dd509e41.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst InputTask = ({inputHandler, taskText, createTask}) => {    \r\n    return (\r\n        <div>\r\n            <input type=\"text\" placeholder=\"Ваша задача\" value={taskText} onChange={inputHandler} />\r\n            <button className=\"button\" onClick={createTask}>Создать задачу</button>\r\n        </div>\r\n    )\r\n};\r\nexport default InputTask;\r\n","import React from 'react'\r\n\r\nconst Task = ({text, deleteTask, Id, toggleDone, done}) => {\r\n    return (\r\n        <div className=\"tasks-list__element\">\r\n            <p className={ done ? \"done\" : \"p\"} onClick={() => toggleDone(Id)}>\r\n                {text} \r\n            </p>\r\n            <button className=\"button\" onClick={() => deleteTask(Id)}>Удалить задачу</button>\r\n        </div>\r\n    )\r\n};\r\nexport default Task;\r\n","import React from 'react'\r\nimport Task from './Task'\r\n\r\nconst TaskList = ({tasksList, complited, uncomplited, filter, deleteTask, toggleDone}) => {\r\n    let tasks = [];\r\n    if (filter === \"all\") {\r\n        tasks = tasksList.map(\r\n            task => <Task key={task.id} Id={task.id} text={task.text} done={task.done}\r\n            deleteTask={deleteTask} toggleDone={toggleDone} />\r\n        )\r\n    } else if (filter === \"complited\"){\r\n        tasks = complited.map( task => <Task key={task.id} Id={task.id} text={task.text} done={task.done}\r\n            deleteTask={deleteTask} toggleDone={toggleDone} />) \r\n    } else if (filter === \"uncomplited\"){\r\n        tasks = uncomplited.map( task => <Task key={task.id} Id={task.id} text={task.text} done={task.done}\r\n            deleteTask={deleteTask} toggleDone={toggleDone} />)\r\n    }\r\n        \r\n    return (\r\n        <div className=\"tasks-list\">\r\n            {tasksList.length < 1 ? \"Здесь будут ваши задачи\" : tasks}\r\n        </div>\r\n    )\r\n}\r\nexport default TaskList;","import React from 'react'\r\n\r\nconst Counter = ({value, label}) => {\r\n    return (\r\n        <label>{label}<input value={value} type=\"number\" readOnly /></label>\r\n    )\r\n}\r\nexport default Counter\r\n","import { useState, useEffect } from 'react';\r\nimport '../src/css/App.css';\r\nimport InputTask from './components/InputTask';\r\nimport TaskList from './components/TaskList';\r\nimport Counter from './components/Counter';\r\n\r\nfunction App() {\r\n  // Состояние\r\n  const [tasksList, setTasksList] = useState([]);\r\n  const [taskText, setTaskText] = useState(\"\");\r\n  const [doneCounter, setDoneCounter] = useState(0);\r\n  const [taskCounter, setTaskCounter] = useState(0);\r\n  const [complited, setComplited] = useState(null);\r\n  const [uncomplited, setUncomplited] = useState(null);\r\n  const [filter, setFilter] = useState(\"all\")\r\n\r\n  //Обработчики сосотояния\r\n  useEffect(() => setDoneCounter(tasksList.filter( item => item.done === true).length), [tasksList]);\r\n  useEffect(() => setTaskCounter(tasksList.filter( item => item.done === false).length), [tasksList]);\r\n  useEffect(() => setComplited(tasksList.filter(item => item.done === true)), [tasksList]);\r\n  useEffect(() => setUncomplited(tasksList.filter(item => item.done === false)), [tasksList]);  \r\n  const inputHandler = (e) => setTaskText(e.target.value);    \r\n  const createTask = () => {\r\n    if (taskText.length > 10) {\r\n      alert(\"Должно быть не более 10 символов !\");\r\n    } else if (taskText.length < 1) {\r\n      alert (\"Сперва нужно написать текст задачи !\")\r\n    } else {\r\n      setTasksList([\r\n        ...tasksList,\r\n        {id: Math.floor(Math.random() * 1000), text: taskText, done: false}\r\n      ]);\r\n      setTaskText(\"\");\r\n    }  \r\n  }\r\n  const deleteTask = (Id) => {\r\n    setTasksList(tasksList.filter( el => el.id !== Id))\r\n  };\r\n  const toggleDone = (Id) => {\r\n    setTasksList(tasksList.map( item => {\r\n      if (item.id === Id) {        \r\n        return {          \r\n          ...item,\r\n          done: !item.done\r\n        };        \r\n      } return item     \r\n    }));    \r\n  };\r\n  const toggleFilter = (e) => setFilter(e.target.value); \r\n  \r\n  //Тело приложения  \r\n  return (\r\n    <div className=\"App\">\r\n      <section className=\"App__counters\">\r\n        <div className=\"complited\">\r\n          <Counter value={doneCounter} label={\"Заданий выполнено\"} />\r\n        </div>\r\n        <div className=\"uncomplited\">\r\n          <Counter value={taskCounter} label={\"Заданий нужно выполнить\"} />\r\n        </div>\r\n      </section>\r\n      <section className=\"App__tasksList\">        \r\n        <TaskList tasksList={tasksList} complited={complited} uncomplited={uncomplited} \r\n        filter={filter} deleteTask={deleteTask} toggleDone={toggleDone} />  \r\n      </section>\r\n      <section className=\"App__input\">\r\n        <InputTask inputHandler={inputHandler} taskText={taskText} createTask={createTask}/>\r\n      </section>\r\n      <section className=\"App__filters\">\r\n        <p>Фильтр:</p>\r\n        <label>выполненые задания<input type=\"radio\" name=\"tasks\" value=\"complited\" onChange={toggleFilter} /></label>\r\n        <label>не выполненые задания<input type=\"radio\" name=\"tasks\" value=\"uncomplited\" onChange={toggleFilter} /></label>\r\n        <label>все задания<input type=\"radio\" name=\"tasks\" value=\"all\" onChange={toggleFilter} defaultChecked /></label>\r\n      </section>      \r\n    </div>\r\n  );\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}