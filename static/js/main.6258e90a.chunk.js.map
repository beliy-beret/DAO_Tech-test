{"version":3,"sources":["components/InputTask.jsx","components/Task.jsx","components/TaskList.jsx","components/Counter.jsx","components/FilterComponent.jsx","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js"],"names":["InputTask","inputHandler","taskText","createTask","type","placeholder","value","onChange","className","onClick","Task","text","deleteTask","Id","toggleDone","done","TaskList","tasksList","complited","uncomplited","filter","tasks","map","task","id","length","Counter","label","readOnly","FilterComponent","name","onchange","defaultChecked","App","useSelector","state","complitedCounter","uncomplitedCounter","dispatch","useDispatch","setUncomplitedCounter","setComplitedCounter","getComplited","getUncomplited","toggleFilter","e","payload","target","useEffect","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_TASK","DEL_TASK","TOGGLE_DONE","SET_TASKTEXT","SET_FILTER_VALUE","SET_COMPLITED_COUNTER","SET_UNCOMPLITED_COUNTER","GET_COMPLITED_TASK","GET_UNCOMPLITED_TASK","defaultState","reducer","action","Math","floor","random","el","item","store","createStore","require","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6258e90a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst InputTask = ({inputHandler, taskText, createTask}) => {    \r\n    return (\r\n        <div>\r\n            <input type=\"text\" placeholder=\"Ваша задача\" value={taskText} onChange={inputHandler} />\r\n            <button className=\"button\" onClick={createTask}>Создать задачу</button>\r\n        </div>\r\n    )\r\n};\r\nexport default InputTask;\r\n","import React from 'react'\r\n\r\nconst Task = ({text, deleteTask, Id, toggleDone, done}) => {\r\n    return (\r\n        <div className=\"tasks-list__element\">\r\n            <p className={ done ? \"done\" : \"p\"} onClick={() => toggleDone(Id)}>\r\n                {text} \r\n            </p>\r\n            <button className=\"button\" onClick={() => deleteTask(Id)}>Удалить задачу</button>\r\n        </div>\r\n    )\r\n};\r\nexport default Task;\r\n","import React from 'react'\r\nimport Task from './Task'\r\n\r\nconst TaskList = ({tasksList, complited, uncomplited, filter, deleteTask, toggleDone}) => {\r\n    let tasks = [];\r\n    if (filter === \"all\") {\r\n        tasks = tasksList.map(\r\n            task => <Task key={task.id} Id={task.id} text={task.text} done={task.done}\r\n            deleteTask={deleteTask} toggleDone={toggleDone} />\r\n        )\r\n    } else if (filter === \"complited\"){\r\n        tasks = complited.map( task => <Task key={task.id} Id={task.id} text={task.text} done={task.done}\r\n            deleteTask={deleteTask} toggleDone={toggleDone} />) \r\n    } else if (filter === \"uncomplited\"){\r\n        tasks = uncomplited.map( task => <Task key={task.id} Id={task.id} text={task.text} done={task.done}\r\n            deleteTask={deleteTask} toggleDone={toggleDone} />)\r\n    }\r\n        \r\n    return (\r\n        <div className=\"tasks-list\">\r\n            {tasksList.length < 1 ? \"Здесь будут ваши задачи\" : tasks}\r\n        </div>\r\n    )\r\n}\r\nexport default TaskList;","import React from 'react'\r\n\r\nconst Counter = ({value, label}) => {\r\n    return (\r\n        <label>{label}<input value={value} type=\"number\" readOnly /></label>\r\n    )\r\n}\r\nexport default Counter\r\n","import React from 'react'\r\n\r\nconst FilterComponent = ({label, name, value, onchange, defaultChecked}) => {\r\n    return (\r\n        <label>{label}\r\n            <input type=\"radio\" name={name} value={value} onChange={onchange} defaultChecked={defaultChecked} />\r\n        </label>\r\n    )\r\n}\r\nexport default FilterComponent;\r\n","import { useEffect } from 'react';\r\nimport '../src/css/App.css';\r\nimport InputTask from './components/InputTask';\r\nimport TaskList from './components/TaskList';\r\nimport Counter from './components/Counter';\r\nimport FilterComponent from './components/FilterComponent';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst App = () => {\r\n\r\n  // Состояние  \r\n  const tasksList = useSelector( state => state.tasksList);\r\n  const taskText = useSelector( state => state.taskText);\r\n  const filter = useSelector( state => state.filter);\r\n  const complitedCounter = useSelector( state => state.complitedCounter);\r\n  const uncomplitedCounter = useSelector( state => state.uncomplitedCounter);\r\n  const complited = useSelector( state => state.complited);\r\n  const uncomplited = useSelector( state => state.uncomplited); \r\n  \r\n  //Обработчики сосотояния\r\n  const dispatch = useDispatch();\r\n  const setUncomplitedCounter = () => dispatch({type: \"SET_UNCOMPLITED_COUNTER\"})\r\n  const setComplitedCounter = () => dispatch({type: \"SET_COMPLITED_COUNTER\"});\r\n  const getComplited = () => dispatch({type: \"GET_COMPLITED_TASK\"});\r\n  const getUncomplited = () => dispatch({type: \"GET_UNCOMPLITED_TASK\"});    \r\n  const inputHandler = (e) => dispatch({ type: \"SET_TASKTEXT\", payload: e.target.value});    \r\n  const createTask = () => {\r\n    if (taskText.length > 10) {\r\n      alert(\"Должно быть не более 10 символов !\");\r\n    } else if (taskText.length < 1) {\r\n      alert (\"Сперва нужно написать текст задачи !\")\r\n    } else {      \r\n      dispatch({type: \"ADD_TASK\", payload: taskText});\r\n      dispatch({type: \"SET_TASKTEXT\", payload: \"\"});\r\n    };  \r\n  };\r\n  const deleteTask = (Id) => dispatch({type: \"DEL_TASK\", payload: Id});\r\n  const toggleDone = (Id) => dispatch({type: \"TOGGLE_DONE\", payload: Id});\r\n  const toggleFilter = (e) => dispatch({type: \"SET_FILTER_VALUE\", payload: e.target.value}); \r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => setComplitedCounter, [tasksList]);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => setUncomplitedCounter, [tasksList]);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => getComplited, [tasksList]);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => getUncomplited, [tasksList]);\r\n\r\n  //Тело приложения  \r\n  return (\r\n    <div className=\"App\">\r\n      <section className=\"App__counters\">\r\n        <div className=\"complited\">\r\n          <Counter value={complitedCounter} label={\"Заданий выполнено\"} />\r\n        </div>\r\n        <div className=\"uncomplited\">\r\n          <Counter value={uncomplitedCounter} label={\"Заданий нужно выполнить\"} />\r\n        </div>\r\n      </section>\r\n      <section className=\"App__tasksList\">        \r\n        <TaskList tasksList={tasksList} complited={complited} uncomplited={uncomplited} \r\n        filter={filter} deleteTask={deleteTask} toggleDone={toggleDone} />   \r\n      </section>\r\n      <section className=\"App__input\">\r\n        <InputTask inputHandler={inputHandler} taskText={taskText} createTask={createTask}/>\r\n      </section>\r\n      <section className=\"App__filters\">\r\n        <p>Фильтр:</p>\r\n        <FilterComponent label=\"выполненые задания\" name=\"tasks\" value=\"complited\" onchange={toggleFilter} />\r\n        <FilterComponent label=\"не выполненые задания\" name=\"tasks\" value=\"uncomplited\" onchange={toggleFilter} />\r\n        <FilterComponent label=\"все задания\" name=\"tasks\" value=\"all\" onchange={toggleFilter} defaultChecked=\"true\" />        \r\n      </section>      \r\n    </div>\r\n  );\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const ADD_TASK = \"ADD_TASK\";\r\nconst DEL_TASK = \"DEL_TASK\";\r\nconst TOGGLE_DONE = \"TOGGLE_DONE\";\r\nconst SET_TASKTEXT = \"SET_TASKTEXT\";\r\nconst SET_FILTER_VALUE = \"SET_FILTER_VALUE\";\r\nconst SET_COMPLITED_COUNTER = \"SET_COMPLITED_COUNTER\";\r\nconst SET_UNCOMPLITED_COUNTER = \"SET_UNCOMPLITED_COUNTER\";\r\nconst GET_COMPLITED_TASK = \"GET_COMPLITED_TASK\";\r\nconst GET_UNCOMPLITED_TASK = \"GET_UNCOMPLITED_TASK\";   \r\n \r\nconst defaultState = {\r\n    tasksList: [],\r\n    taskText: \"\",\r\n    complited: [],\r\n    uncomplited: [],\r\n    filter: \"all\",\r\n    complitedCounter: 0,\r\n    uncomplitedCounter: 0,\r\n}\r\n\r\nconst reducer = (state = defaultState, action) => {\r\n    switch(action.type){\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                tasksList: [\r\n                    ...state.tasksList,\r\n                    {id: Math.floor(Math.random() * 1000), text: action.payload, done: false}\r\n                ]\r\n            };\r\n        case DEL_TASK:\r\n            return {\r\n                ...state,\r\n                tasksList: state.tasksList.filter( el => el.id !== action.payload)\r\n            };\r\n        case TOGGLE_DONE:\r\n            return {\r\n                ...state,\r\n                tasksList: state.tasksList.map( task => {\r\n                    if (task.id === action.payload){\r\n                        return {\r\n                            ...task,\r\n                            done: !task.done\r\n                        }\r\n                    } return task\r\n                })\r\n            };\r\n        case SET_TASKTEXT:\r\n            return {\r\n                ...state,\r\n                taskText: action.payload\r\n            };\r\n        case SET_FILTER_VALUE:\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            };\r\n        case SET_COMPLITED_COUNTER:\r\n            return {\r\n                ...state,\r\n                complitedCounter: state.tasksList.filter( item => item.done === true).length\r\n            };\r\n        case SET_UNCOMPLITED_COUNTER: \r\n            return {\r\n                ...state,\r\n                uncomplitedCounter: state.tasksList.filter( item => item.done === false).length\r\n            };\r\n        case GET_COMPLITED_TASK:\r\n            return {\r\n                ...state,\r\n                complited: state.tasksList.filter( item => item.done === true)\r\n            };\r\n        case GET_UNCOMPLITED_TASK:\r\n            return {\r\n                ...state,\r\n                uncomplited: state.tasksList.filter( item => item.done === false)\r\n            };\r\n        default:\r\n            return state\r\n    };\r\n}\r\nexport default reducer;","import reducer from \"./reducer\";\r\nconst { createStore } = require(\"redux\");\r\n\r\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}